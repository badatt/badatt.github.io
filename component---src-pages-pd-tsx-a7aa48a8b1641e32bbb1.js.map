{"version":3,"sources":["webpack:///./src/components/Pd/styles.ts","webpack:///./src/components/Pd/index.tsx","webpack:///./src/pages/pd.tsx","webpack:///./src/components/utils/FormatHtml/index.tsx"],"names":["Details","styled","main","withConfig","displayName","componentId","Images","figure","Pd","allMarkdownRemark","profile1","profile2","profile3","useStaticQuery","html","edges","profilePic1","childImageSharp","fluid","profilePic2","profilePic3","React","createElement","Fragment","Styled","Img","FormatHtml","className","content","node","PersonalDetails","LayoutEmpty","_ref","dangerouslySetInnerHTML","__html"],"mappings":"iMAGO,MAAMA,EAAUC,IAAOC,KAAIC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAXJ,CAAW,SAC5B,qBAGOK,EAASL,IAAOM,OAAMJ,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAbJ,CAAa,2GC4DpBO,MArDMA,KACnB,MAAM,kBAAEC,EAAiB,SAAEC,EAAQ,SAAEC,EAAQ,SAAEC,GAAaC,yBAAe,cAiCrEC,EAAYL,EAAkBM,MAAM,GACpCC,EAA+BN,EAASO,gBAAgBC,MACxDC,EAA+BR,EAASM,gBAAgBC,MACxDE,EAA+BR,EAASK,gBAAgBC,MAE9D,OACEG,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACE,EAAa,KACZH,IAAAC,cAACG,IAAG,CAACP,MAAOF,IACZK,IAAAC,cAACG,IAAG,CAACP,MAAOC,IACZE,IAAAC,cAACG,IAAG,CAACP,MAAOE,KAEdC,IAAAC,cAACE,EAAc,KACbH,IAAAC,cAACI,IAAU,CAACC,UAAU,KAAKC,QAASd,EAAKe,KAAKf,UChDvCgB,UARmBA,IAE9BT,IAAAC,cAACS,IAAW,KACVV,IAAAC,cAACd,EAAE,Q,oCCRT,yBAgBekB,IATqBM,IAAA,IAAC,UAAEL,EAAS,QAAGC,GAASI,EAAA,OAC1DX,IAAAC,cAAA,QACEK,UAAcA,EAAH,eACXM,wBAAyB,CACvBC,OAAQN","file":"component---src-pages-pd-tsx-a7aa48a8b1641e32bbb1.js","sourcesContent":["import styled from 'styled-components';\r\nimport tw from 'tailwind.macro';\r\n\r\nexport const Details = styled.main`\r\n  ${tw`p-1`};\r\n`;\r\n\r\nexport const Images = styled.figure`\r\n  display: flex;\r\n  align-items: baseline;\r\n  flex-direction: column;\r\n  gap: 0.5rem;\r\n\r\n  & > div {\r\n    width: 16rem;\r\n    height: 28rem;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\n\r\nimport { ImageSharpFluid } from 'helpers/definitions';\r\nimport FormatHtml from 'components/utils/FormatHtml';\r\nimport * as Styled from './styles';\r\n\r\ninterface IPd {\r\n  node: {\r\n    html: React.ReactNode;\r\n  };\r\n}\r\n\r\nconst Pd: React.FC = () => {\r\n  const { allMarkdownRemark, profile1, profile2, profile3 } = useStaticQuery(graphql`\r\n    {\r\n      allMarkdownRemark(filter: { frontmatter: { category: { eq: \"pd\" } } }) {\r\n        edges {\r\n          node {\r\n            html\r\n          }\r\n        }\r\n      }\r\n      profile1: file(relativePath: { eq: \"profile-1.jpg\" }) {\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      profile2: file(relativePath: { eq: \"profile-2.jpg\" }) {\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n      profile3: file(relativePath: { eq: \"profile-3.jpg\" }) {\r\n        childImageSharp {\r\n          fluid {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const html: IPd = allMarkdownRemark.edges[0];\r\n  const profilePic1: ImageSharpFluid = profile1.childImageSharp.fluid;\r\n  const profilePic2: ImageSharpFluid = profile2.childImageSharp.fluid;\r\n  const profilePic3: ImageSharpFluid = profile3.childImageSharp.fluid;\r\n\r\n  return (\r\n    <>\r\n      <Styled.Images>\r\n        <Img fluid={profilePic1} />\r\n        <Img fluid={profilePic2} />\r\n        <Img fluid={profilePic3} />\r\n      </Styled.Images>\r\n      <Styled.Details>\r\n        <FormatHtml className=\"pd\" content={html.node.html} />\r\n      </Styled.Details>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pd;\r\n","import React from 'react';\r\n\r\nimport { LayoutEmpty } from 'components/Layout';\r\nimport Pd from 'components/Pd';\r\n\r\nconst PersonalDetails: React.FC = () => {\r\n  return (\r\n    <LayoutEmpty>\r\n      <Pd />\r\n    </LayoutEmpty>\r\n  );\r\n};\r\n\r\nexport default PersonalDetails;\r\n","import React, { ReactNode } from 'react';\n\ninterface Props {\n  content: any;\n  className: string;\n}\n\nconst FormatHtml: React.FC<Props> = ({ className , content }) => (\n  <span\n    className={`${className} format-html`}\n    dangerouslySetInnerHTML={{\n      __html: content\n    }}\n  />\n);\n\nexport default FormatHtml;\n"],"sourceRoot":""}